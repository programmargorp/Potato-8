#include <iostream>
#include "mem.h"
#include "build/emu.h"

mem::mem(){
    // Init memory
    uint8_t charset[80]{
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80 // F
    };

    for(auto x=0; x<80; ++x)
        _mem[x] = charset[x];
}

mem_status mem::write_mem(uint8_t *buf, uint16_t loc, uint16_t size){
    if((loc + size) < CHIP8_MEM_SIZE){
        for(int x=0; x<size; ++x){
            _mem[x + loc] = buf[x];
        }
        return MEM_OK;
    }else{
        return MEM_ERR_OUT_OF_BOUNDS;
    }
}

mem_status mem::read_mem(uint8_t *buf, uint16_t loc, uint16_t size){
    if((loc + size) < CHIP8_MEM_SIZE){
        for(int x=0; x<size; ++x){
            buf[x] = _mem[x + loc];
        }
        return MEM_OK;
    }else{
        return MEM_ERR_OUT_OF_BOUNDS;
    }
}